# 大鱼TT，小政K6主板，行程310mm*310mm*300mm

[mcu]
#baud: 250000 #主板通信波特率，一般不需要改动
serial:/dev/serial/by-id/usb-Klipper_stm32f103xe_lyz103c8t6-usb-8mhz-if00 #上位机和下位机通讯的接口，配置正确才能连接上打印机

restart_method: command
[pause_resume]

[display_status]

[virtual_sdcard]
path: /home/user/printer_data/gcodes   #虚拟SD卡，如果主机的速度不足以很好地运行 OctoPrint，虚拟 SD 卡可能有帮助

[printer]
kinematics: corexy			# corexy结构，普通结构（笛卡尔坐标系）填cartesian
max_z_velocity: 8			# z轴限制最大速度
max_z_accel: 200				# z轴限制最大加速度
max_velocity: 600			  # xy最大速度
max_accel: 30000			  # xy最大加速度

[stepper_x]
step_pin: PB6                     # step端口
dir_pin: !PB5                     # 电机运动方向定义，如果发现方向相反在前加！，例如本来是PA1发现反向那就改成！PA1
enable_pin: !PB1                  # 信号端口
microsteps: 16                    # 细分
rotation_distance: 40             # 主动轮周长mm（2GT-20齿同步轮=40，2GT-16齿同步轮=32）
full_steps_per_rotation: 200      # 步进电机转一圈需要的步数（1.8度电机:360/1.8=200，0.9度电机:360/0.9=400）
position_min: 0                   # 行程最小位置的坐标
position_max: 310                # 行程最大位置的坐标
position_endstop: 0               # 限位开关触发位置的坐标
homing_speed: 40                  # 归零速度
homing_retract_dist: 5            # 第一次回原点后，后退的距离 
second_homing_speed: 5            # 第二次回原点的速度
#homing_positive_dir: true        # 复位方向（一般不需要改动）
endstop_pin: !PC13               # 限位开关PIN（X-）

[stepper_y]
step_pin: PB3                     # step端口 
dir_pin: !PA15	                  # 电机运动方向定义，如果发现方向相反在前加！，例如本来是PA1发现反向那就改成！PA1
enable_pin: !PB1                  # en端口
microsteps: 16                    # 细分
rotation_distance: 40             # 主动轮周长mm（2GT-20齿同步轮=40，2GT-16齿同步轮=32）
full_steps_per_rotation: 200      # 步进电机转一圈需要的步数（1.8度电机:360/1.8=200，0.9度电机:360/0.9=400）
position_min: 0                   # 行程最小位置的坐标
position_max: 310                 # 行程最大位置的坐标
position_endstop: 310             # 限位开关触发位置的坐标
homing_speed: 40                  # 复位速度
homing_retract_dist: 5            # 第一次回原点后，后退的距离 
second_homing_speed: 5            # 第二次回原点的速度
#homing_positive_dir: true        # 复位方向（一般不需要改动）
endstop_pin: !PC14               # 限位PIN（Y+）



[stepper_z]
step_pin: PA8				                    #step端口
dir_pin: PB15			                    #电机运动方向定义，如果发现方向相反在前加！，例如本来是PA1发现反向那就改成！PA1
enable_pin: !PB1		                    #电机使能引脚，如果发现，未归位电机锁死，操作电机时不转并且此时电机没有锁死，在前面加！
rotation_distance: 8	                	#电机旋转一圈Z轴移动的距离，例如T8丝杆的导程是8mm，即丝杆转一圈螺母移动8mm
microsteps: 16			            	      #步进电机使用的细分数
full_steps_per_rotation: 200            #电机旋转一圈需要的步数，例如1.8度电机为360/1.8=200
#gear_ratio: 1:1			          	      #传动比
#endstop_pin: ^!PA15			              #引脚触发限位
endstop_pin:probe:z_virtual_endstop     #设置Z轴为虚拟限位，使用接近开关需要开启此项
position_min: -10			                	#Z轴可移动的最小值
position_max: 300			                  #Z轴可移动的最大值
#position_endstop: 1		                #限位的位置，使用接近开关无需开启此项
#homing_speed: 5			            	    #Z轴回零速度
#homing_retract_dist: 5.0	              #第一次碰到限位回缩距离
#homing_retract_speed: 5		            #第一次碰到限位回缩时候的速度
#second_homing_speed: 2		              #第二次去触发限位时候的速度

[stepper_z1]
step_pin: PB13				          #驱动步进脚
dir_pin: PB12				          #驱动方向引脚，如果发现方向相反在前加！，例如本来是PA1发现反向那就改成！PA1
enable_pin:!PB1                 #电机使能引脚，如果发现，未归位电机锁死，操作电机时不转并且此时电机没有锁死，在前面加！
#endstop_pin: ^!PA14			      #引脚触发限位，多个Z轴多个限位才需开启此项
rotation_distance: 8		        #电机旋转一圈Z轴移动的距离，例如T8丝杆的导程是8mm，即丝杆转一圈螺母移动8mm
microsteps: 16				          #步进电机使用的细分数
full_steps_per_rotation: 200    #电机旋转一圈需要的步数，例如1.8度电机为360/1.8=200
#gear_ratio: 1:1				        #传动比

[stepper_z2]
step_pin:PB10                     #驱动步进脚
dir_pin: PB2                     #驱动方向引脚，如果发现方向相反在前加！，例如本来是PA1发现反向那就改成！PA1
enable_pin: !PB1                 #电机使能引脚，如果发现，未归位电机锁死，操作电机时不转并且此时电机没有锁死，在前面加！
rotation_distance: 8	         	 #电机旋转一圈Z轴移动的距离，例如T8丝杆的导程是8mm，即丝杆转一圈螺母移动8mm
microsteps: 16				           #步进电机使用的细分数
full_steps_per_rotation: 200     #电机旋转一圈需要的步数，例如1.8度电机为360/1.8=200
#gear_ratio: 1:1				         #传动比



[extruder]
step_pin: PA13                       #PB10
dir_pin:   PA10                      #!PB1 
enable_pin: !PB1                     #电机使能引脚，如果发现，未归位电机锁死，操作电机时不转并且此时电机没有锁死，在前面加！
microsteps: 16							         #驱动 细分数
rotation_distance: 22.987				     #挤出机旋转一圈挤出的长度
gear_ratio: 50:10							       #挤出机齿轮减速比
nozzle_diameter: 0.400		 			     #喷嘴直径
filament_diameter: 1.750			       #耗材直径
heater_pin: PB8						           #加热引脚
max_power: 1.0							         #加热头的最大功率，如果你的电源额定功率非常低，那可以用0.3或0.5，但是会加热的慢
sensor_type: Generic 3950		         #温度传感器的类型
sensor_pin: PA6							         #ADC引脚
pullup_resistor: 2200					       #与热敏接入电路中的上拉电阻
#smooth_time: 1							         #使用多久时间内测得多组数据的平均温度当温度值
#control: pid							           #温控算法pid 或者 watermark
		#以下是pid控温系数
#pid_kp = 39.282
#pid_ki = 2.476
#pid_kd = 112.803	                   #pid结束
		#以下是watermark控温系数
# max_delta: 2.0						         #当温度-预设温度>max_delta停止加热，当预设温度-温度<max_delta开始加热
		#watermark结束
#pwm_cycle_time: 0.100					     #加热器pwm切换时间，保持默认为好
min_extrude_temp: 170					       #挤出机能挤出的最小温度
min_temp: -270						             #打印机能运作的最低温度，调试时候可以给-273，正常使用不建议低于-10度
max_temp: 320							           #挤出加热棒的最大温度，超过此温度将紧急停机

[heater_bed]
heater_pin: PB9							  #加热引脚
max_power: 1						   	  #加热头的最大功率，如果你的电源额定功率非常低，那可以用0.3或0.5，但是会加热的慢
sensor_type: Generic 3950		  #温度传感器的类型
sensor_pin: PA5							  #ADC引脚
pullup_resistor: 4700					#与热敏接入电路中的上拉电阻
#smooth_time: 1							  #使用多久时间内测得多组数据的平均温度当温度值
#pwm_cycle_time: 0.100				#加热器pwm切换时间，保持默认为好
min_temp: -200						      #打印机能运作的最低温度，调试时候可以给-273，正常使用不建议低于-10度
max_temp: 120                 #最大温度，超过此温度将紧急停机
control: pid
pid_kp = 62.922
pid_ki = 0.539
pid_kd = 1835.747		

#####################################################################
#   TMC2209 驱动配置   没有静音驱动 要全部注释掉
#####################################################################
[tmc2209 stepper_x]
uart_pin: PB7               #RX
uart_address: 0             #对应地址
interpolate: True           #开启插值=256细分
run_current: 1.00          #电机电流
hold_current: 0.800         #电机静态力矩保持电流值
sense_resistor: 0.110       #驱动采样电阻值（不要修改）
stealthchop_threshold: 0

[tmc2209 stepper_y]
uart_pin: PB4               #RX
uart_address: 0             #对应地址
interpolate: True           #开启插值=256细分
run_current: 1.00         #电机电流
hold_current: 0.800         #电机静态力矩保持电流值
sense_resistor: 0.110       #驱动采样电阻值（不要修改）
stealthchop_threshold: 0

[tmc2208 extruder]
uart_pin: PA14              #RX
uart_address: 0             #对应地址
interpolate: True
run_current: 0.800
hold_current: 0.500
sense_resistor: 0.110
stealthchop_threshold: 99999

[tmc2208 stepper_z]
uart_pin: PA9               #RX
uart_address: 0             #对应地址
interpolate: False
run_current: 0.800
hold_current: 0.400
sense_resistor: 0.110
stealthchop_threshold: 99999

[tmc2208 stepper_z1]
uart_pin: PB14              #RX
uart_address: 0             #对应地址
interpolate: False
run_current: 0.800
hold_current: 0.400
sense_resistor: 0.110
stealthchop_threshold: 99999

[tmc2208 stepper_z2]
uart_pin: PB11              #RX
uart_address: 0             #对应地址
interpolate: False
run_current: 0.800
hold_current: 0.400
sense_resistor: 0.110
stealthchop_threshold: 99999

[probe]
pin: !PC15
x_offset: 20.7             #接近开关与喷嘴在X方向的距离
y_offset: 6.5              #接近开关与喷嘴在Y方向的距离
#z_offset: 0.00            #平台与喷嘴之间的距离，进行Z轴校准的时候自动更改
speed: 5.0                 #探测速度
samples: 4                 #采样次数
sample_retract_dist: 6.0   #采样时喷嘴抬升距离

[z_tilt]
z_positions:                #三个Z轴的支撑点，也就是热床的旋转轴的坐标
  -20.5,-23
  155,349
  330.5,-23
points:                     #三个Z轴回零探测点的坐标
  0,5
  134.3,290
  270,5
speed: 100                  #校准时的移动速度
horizontal_move_z: 20       #喷嘴抬升高度
retries: 5                  #重复测量次数
retry_tolerance: 0.05       #重复测量的最大误差

[safe_z_home]
home_xy_position:135,142    #Z归位时的X，Y坐标（例如100，100），在这个坐标上进行Z归位。
speed: 50                  #工具头移动到安全Z原点的速度，默认为50毫米/秒
z_hop:10                   #在归位前抬升Z轴的距离（mm）。这将用于任何归位命令，即使它没有将Z轴归位。
z_hop_speed: 15            #在归位之前，Z轴抬升的速度（单位：mm/s），默认为15mm/s。
move_to_previous: true     #当设置为 "True "时，X轴和Y轴在Z轴归位后会重置到之前的位置，默认为false。
				
[bed_mesh]
speed: 50                  #非测试时候的xy移动速度，即这个点到下个点之间的移动速度
horizontal_move_z: 10      #Z轴抬升高度
mesh_min:30,10             #第一个探测的坐标，最接近原点。该坐标是相对于探针的位置的
mesh_max:300,300           #距离原点最远的探测坐标。这不一定是探测的最后一点
probe_count: 5,5           #采样点数（4X4为16点）
algorithm: bicubic         #要使用的插值算法，可以是"lagrange"或者"bicubic"。当探测点为3*3强制使用lagrange，默认值是lagrange
bicubic_tension: 0.2       #算法插值不要动
mesh_pps: 2,2              #补充采样点数


[temperature_sensor MCU温度]
sensor_type: temperature_mcu
sensor_mcu: mcu
min_temp: 10                 #最小温度
max_temp: 100                #最大温度

#[display_status]
[temperature_sensor 红米2]          #pi的温度显示
sensor_type: temperature_host
min_temp: 10                        #温度小
max_temp: 100                       #温度大



#喉管风扇
[heater_fan 喉管风扇]       #喉管散热风扇
pin:PA2
max_power:1
heater: extruder
heater_temp: 50.0
fan_speed: 0.8

[fan]                       #模型散热风扇
pin: PA1
max_power: 1.0							#风扇最大速度，电源不给力或者大功率建议调低点
#tachometer_pin:-1					#风扇转速检测脚


[fan_generic FAN1]          #备用散热风扇
pin: PA3
max_power: 1


#[fan_generic FAN]
#pin: PB2
#max_power: 1

[output_pin LED灯带] #LED灯带
pin: PA4                      #对应信号引脚  使用FAN接口
pwm: true                       #不使用PWM调节，默认值是false，输出信号引脚电平只有0和1，如果填true，输出信号引脚电平在0到1之间
#static_value:                  #如果设置了该值，则会在启动时将pin分配给该值，并且在运行时无法更改pin。
cycle_time: 0.001               #调节PWM时间
value: 1.0                 #在MCU配置期间最初设置引脚的值。默认值为0（对于低电压）。
shutdown_value: 0


[force_move]
enable_force_move: true



#重写解锁电机的M84指令，然后设置当前位置（类似G92指定位置；强制设定低级运动学代码使用的打印头位置。）
#官方用法为：SET_KINEMATIC_POSITION [X=<值>] [Y=<值>] [Z=<值>]
#不指定坐标就是等于当前面板上的坐标
#[gcode_macro M84]
#rename_existing: M84.1
#gcode:
 # SET_STEPPER_ENABLE STEPPER=stepper_x enable=0
 # SET_STEPPER_ENABLE STEPPER=stepper_y enable=0
 # SET_STEPPER_ENABLE STEPPER=stepper_z enable=0
 # SET_STEPPER_ENABLE STEPPER=stepper_z1 enable=0
 # SET_STEPPER_ENABLE STEPPER=extruder enable=0
 # SET_KINEMATIC_POSITION

#开机后设定当前位置（解锁保护）
[delayed_gcode KINEMATIC_POSITION]
initial_duration:0.2
gcode:
  SET_KINEMATIC_POSITION

#######M84三件套-结束#######

#[bed_screws]
#screw1: 20, 20
#screw2: 175, 20
#screw3: 20, 175
#screw4: 280, 175

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
#对象排除功能 ---------------------
# Enable object exclusion
[exclude_object]

# Enable arcs support
[gcode_arcs]
resolution: 0.1
#---------------------------

[verify_heater heater_bed]
max_error: 120
check_gain_time:5000


[input_shaper]                  #共振补偿
shaper_type_x = 2hump_ei        #定义 X 的输入整形器类型
shaper_freq_x = 68.0            #输入整形器的 X 轴频率(Hz)
shaper_type_y = zv              #定义 Y 的输入整形器类型
shaper_freq_y = 55.6            #输入整形器的 Y 轴频率(Hz)

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 43.0
shaper_type_y = mzv
shaper_freq_y = 43.2

[gcode_macro CANCEL_PRINT]             #取消打印
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE
  G1 X10 F3000
  M84
  M106 S0

#####################################################################
#                           打完关机（需要时启用）
#####################################################################
#使用本脚本后，在"Klipper首页-自定义宏"处出现"DWGJ_ON"与"DWGJ_OFF"
#打印前或者打印中点击 "DWGJ_ON"即开启，"DWGJ_OFF"即关闭
[gcode_macro DWGJ_ON]       # 使能打完关机
variable_dwgj_on: 0
gcode:
    SET_GCODE_VARIABLE MACRO=DWGJ_ON VARIABLE=dwgj_on VALUE=1
    {action_respond_info("DWGJ-ON-ON-ON!")}
#    # 需要使用打完关机时只需点击Klipper首页的 "DWGJ_ON"按钮即开启打完关机
##--------------------------------------------------------------------
[gcode_macro DWGJ_OFF]      # 关闭打完关机
gcode:
    SET_GCODE_VARIABLE MACRO=DWGJ_ON VARIABLE=dwgj_on VALUE=0
    {action_respond_info("DWGJ-OFF-OFF-OFF!")}
#    # 不需要使用打完关机时只需点击Klipper首页的 "DWGJ_OFF"按钮即关闭打完关机
##--------------------------------------------------------------------
[gcode_macro M81]           # M81指令触发的同时打完关机变量使能才会执行关机
gcode:
    {% set is_shutdown = printer["gcode_macro DWGJ_ON"].dwgj_on|int %}
    {% if is_shutdown == 1 %}
        SHUT_DOWN
    {% else %}
#    # 若为触发则暂时什么都不做
    {% endif %}
##--------------------------------------------------------------------
[gcode_macro SHUT_DOWN]      # 设置 SHUT_DOWN 为关机宏
gcode:
    SET_GCODE_VARIABLE MACRO=DWGJ_ON VARIABLE=dwgj_on VALUE=0 #使能打完关机
     {action_emergency_stop("Ready to shut down!!!")}         #执行软件层面关机
    UPDATE_DELAYED_GCODE ID=Delayed_SHUT_DOWN DURATION=3      #执行切断电源
##--------------------------------------------------------------------
[output_pin power]      # 打完关机模块引脚
pin:PB0                # 打完关机引脚，必须填写
value: 1                # 默认值
shutdown_value: 0       # 关机值
##--------------------------------------------------------------------
[delayed_gcode Delayed_SHUT_DOWN]     # 设置延迟关机宏
gcode:
   set_pin pin=power value=0.0        # 延迟关机
##--------------------------------------------------------------------
[delayed_gcode powerOFF]              # 设置延迟执行M81宏
gcode:
    M81 value=0.0                     # 延迟执行M81

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 38.568
#*# pid_ki = 11.179
#*# pid_kd = 33.265
#*#
#*# [heater_bed]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	0.059375, 0.053750, 0.081875, 0.077500, 0.063125
#*# 	0.035000, 0.038750, 0.033125, 0.026875, -0.011250
#*# 	0.000625, -0.000000, 0.006875, -0.021250, -0.059375
#*# 	-0.018750, -0.000625, -0.003750, -0.035000, -0.066250
#*# 	0.051875, 0.071250, 0.065625, 0.056875, 0.028125
#*# x_count = 5
#*# y_count = 5
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = bicubic
#*# tension = 0.2
#*# min_x = 30.0
#*# max_x = 140.0
#*# min_y = 10.0
#*# max_y = 140.0
#*#
#*# [probe]
#*# z_offset = 1.00
#*#
#*# [input_shaper]
#*# shaper_type_y = mzv
#*# shaper_freq_y = 60.4
#*# shaper_type_x = mzv
#*# shaper_freq_x = 70.6